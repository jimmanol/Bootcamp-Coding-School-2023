@page "/itemlist/edit/{Id:guid?}"
@using FuelStation.Web.Blazor.Shared
@using FuelStation.Model
@using FuelStation.Model.Enums;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime



<h3> Edit Item </h3>

@if (Item == null) {
    <p>Loading ...</p>
}
else {
    
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Code</label>
                <input class="form-control" @bind="@Item.Code" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Description</label>
                <input class="form-control" @bind="@Item.Description" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Cost</label>
                <input class="form-control" @bind="@Item.Cost" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Price</label>
                <input class="form-control" @bind="@Item.Price" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Item Type</label>
                <select class="form-control" @bind="@Item.ItemType">
                    @foreach (var enumValue in Enum.GetValues<ItemType>()) {
                        <option value="@enumValue">@enumValue</option>
                    }
                </select>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <button class="btn btn-success" @onclick="OnSave">Save</button>
                <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
            </div>

        </div>
    
}


@code {
    
    [Parameter] public Guid? Id { get; set; }
    ItemEditDto Item { get; set; } = new();


    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            Item = new();
        }
        else {
            Item = await httpClient.GetFromJsonAsync<ItemEditDto>($"item/{Id}");
        }

    }

    private void OnCancel() {
        navigationManager.NavigateTo("itemlist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("item", Item);
        }
        else {
            response = await httpClient.PutAsJsonAsync("item", Item);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("/itemlist");
    }


}
