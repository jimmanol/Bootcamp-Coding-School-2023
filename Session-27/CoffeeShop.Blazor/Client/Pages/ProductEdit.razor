@page "/productlist/edit/{Id:int?}"
@using CoffeeShop.Blazor.Shared;
@using CoffeeShop.Model;
@using CoffeeShop.Model.Enums;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Product Editor</h3>

@if (isLoading) {
    <p>Loading ...</p>
}
else {
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Code</label>
            <input class="form-control" @bind="@Product.Code" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Description</label>
            <input class="form-control" @bind="@Product.Description" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Cost</label>
            <input class="form-control" @bind="@Product.Cost" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Price</label>
            <input class="form-control" @bind="@Product.Price" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Product Category</label>
            <select class="form-control" @bind="Product.ProductCategoryId">
                @foreach (var productCategory in productCategoryList) {
                    <option value="@productCategory.Id">@productCategory.Code - @productCategory.Description</option>
                }
            </select>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>

    </div>
}

@code {

    [Parameter] public int? Id { get; set; }
    ProductEditDto? Product { get; set; } = null!;
    private List<ProductCategoryListDto> productCategoryList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            Product = new();
        }
        else {
            Product = await httpClient.GetFromJsonAsync<ProductEditDto>($"product/{Id}");
        }
        var tempProductCategoryList = await httpClient.GetFromJsonAsync<List<ProductCategoryListDto>>("productCategory");
        if (tempProductCategoryList is not null) {
            productCategoryList = tempProductCategoryList;
        }
        else {
            // Todo: if tempProductCategoryList is not null
        }
        isLoading = false;
    }

    private void OnCancel() {
        navigationManager.NavigateTo("productlist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("product", Product);
        }
        else {
            response = await httpClient.PutAsJsonAsync("product", Product);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("/productlist");
    }

}
