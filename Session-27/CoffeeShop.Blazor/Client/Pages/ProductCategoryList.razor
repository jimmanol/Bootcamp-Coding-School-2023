@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@page "/productcategorylist"
@using CoffeeShop.Blazor.Shared;


<h3>Product Categories</h3>

@if (isLoading) {
    <p>Loading ...</p>
}
else {
    <button class="btn btn-primary" @onclick="CreateItem">Create</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Product Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var productCategory in productCategoryList) {
                <tr>
                    <td>@productCategory.Code</td>
                    <td>@productCategory.Description</td>
                    <td>@productCategory.ProductType</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(productCategory)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(productCategory)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    
    bool isLoading { get; set; } = true;
    private List<ProductCategoryListDto> productCategoryList = new();
    string errorMessage = null;


    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
       productCategoryList = await httpClient.GetFromJsonAsync<List<ProductCategoryListDto>>("productCategory");
    }

    private void CreateItem() {
        navigationManager.NavigateTo("productCategorylist/edit");
    }

    private void EditItem(ProductCategoryListDto productCategory) {
        navigationManager.NavigateTo($"productCategorylist/edit/{productCategory.Id}");
    }

    private async Task DeleteItem(ProductCategoryListDto productCategory) {
        errorMessage = null;
        var comfirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (comfirm) {
            var response = await httpClient.DeleteAsync($"productCategory/{productCategory.Id}");
            if (response.IsSuccessStatusCode) {
                await LoadItemsFromServer();
            }
            else {
                errorMessage = await response.Content.ReadAsStringAsync();
                //await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }
}
